<templateSet group="React">
  <template name="con" value="constructor(props) {&#10; super(props);&#10; $END$&#10;}&#10;" description="Adds a default constructor for the class that contains props as arguments" toReformat="true" toShortenFQNames="true" deactivated="true" />
  <template name="t" value="{ t('$id$') }$END$" description="t" toReformat="true" toShortenFQNames="true">
    <variable name="id" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JSX_HTML" value="true" />
      <option name="TSX_HTML" value="true" />
    </context>
  </template>
  <template name="ut" value="const { t } = useTranslation$END$('$namespace$')" description="useTranslation" toReformat="true" toShortenFQNames="true">
    <variable name="namespace" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="uc" value="const $NAME$ = useCallback(&#10;&#9;function $NAME$() {&#10;&#9;&#9;$END$&#10;&#9;},&#10;&#9;[]&#10;)" description="useCallback" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="um" value="const $NAME$ = React.useMemo(&#10;&#9;() =&gt; $IMPLEMENTATION$,&#10;&#9;[$DEPENDENCIES$]&#10;)$END$" description="useMemo" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="IMPLEMENTATION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DEPENDENCIES" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ue" value="useEffect(&#10;&#9;function $NAME$() {&#10;&#9;&#10;&#9;},&#10;&#9;[$DEPENDENCIES$]&#10;)$END$" description="useEffect" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DEPENDENCIES" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="us" value="const [$NAME$, $SETTER_NAME$] = useState&lt;$TYPE$&gt;($DEFAULT_VALUE$)" description="use state" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SETTER_NAME" expression="concat(&quot;set&quot;, capitalize(NAME))" defaultValue="" alwaysStopAt="false" />
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DEFAULT_VALUE" expression="" defaultValue="&quot;null&quot;" alwaysStopAt="true" />
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>